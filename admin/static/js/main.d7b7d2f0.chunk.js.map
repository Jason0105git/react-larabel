{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js","actions.js"],"names":["module","exports","__webpack_require__","p","App","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","react_default","a","createElement","className","Component","Boolean","window","location","hostname","match","initialState","items","elements","store","createStore","state","arguments","length","undefined","action","type","objectSpread","concat","toConsumableArray","playholder","slice","__REDUX_DEVTOOLS_EXTENSION__","console","log","getState","dispatch","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,gMCyBzBC,iCAlBb,SAAAA,EAAYC,GAAO,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAAAE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KACXH,0EAIR,OAEEO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,mBAEFF,EAAAC,EAAAC,cAAA,gCAbaE,cCMCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,sECPAC,EAAe,CACpBC,MAAO,CAAC,SAAS,SAAS,UAC1BC,SAAU,CAAC,YAAY,YAAY,cAuB9BC,EAAQC,YApBE,WAAkC,IAAjCC,EAAiCC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzBN,EAAcS,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAEjD,OAAOC,EAAOC,MACb,ICnBsB,WDoBrB,OAAO1B,OAAA2B,EAAA,EAAA3B,CAAA,GAAIqB,EAAX,CAAkBJ,MAAK,GAAAW,OAAA5B,OAAA6B,EAAA,EAAA7B,CAAMqB,EAAMJ,OAAZ,CAAkBQ,EAAOK,eACjD,ICpBsB,WDsBrB,OAAO9B,OAAA2B,EAAA,EAAA3B,CAAA,GAAIqB,EAAX,CAAkBJ,MAAK,GAAAW,OAAA5B,OAAA6B,EAAA,EAAA7B,CAAMqB,EAAMJ,MAAMc,MAAM,EAAEN,EAAOK,aAAjC9B,OAAA6B,EAAA,EAAA7B,CAAgDqB,EAAMJ,MAAMc,MAAMN,EAAOK,WAAW,OAG5G,ICxByB,cDyBxB,OAAO9B,OAAA2B,EAAA,EAAA3B,CAAA,GAAIqB,EAAX,CAAkBH,SAAQ,GAAAU,OAAA5B,OAAA6B,EAAA,EAAA7B,CAAMqB,EAAMH,UAAZ,CAAqBO,EAAOK,eACvD,ICzByB,cD0BxB,OAAO9B,OAAA2B,EAAA,EAAA3B,CAAA,GAAIqB,EAAX,CAAkBH,SAAQ,GAAAU,OAAA5B,OAAA6B,EAAA,EAAA7B,CAAMqB,EAAMH,SAASa,MAAM,EAAEN,EAAOK,aAApC9B,OAAA6B,EAAA,EAAA7B,CAAmDqB,EAAMH,SAASa,MAAMN,EAAOK,WAAW,OACrH,QACC,OAAOT,EAET,OAAOA,GAG0BT,OAAOoB,8BAAgCpB,OAAOoB,gCAChFC,QAAQC,IAAIf,EAAMgB,YAElBhB,EAAMiB,SAAS,CAACV,KCvCQ,WDuCQI,WAAY,WAC5CG,QAAQC,IAAIf,EAAMgB,YAElBhB,EAAMiB,SAAS,CAACV,KCxCW,cDwCQI,WAAY,cAC/CG,QAAQC,IAAIf,EAAMgB,YAElBhB,EAAMiB,SAAS,CAACV,KC5CQ,WD4CQI,WAAY,IAC5CG,QAAQC,IAAIf,EAAMgB,YAElBhB,EAAMiB,SAAS,CAACV,KC/CQ,WD+CQI,WAAY,IAC5CG,QAAQC,IAAIf,EAAMgB,YAGlBhB,EAAMiB,SAAS,CAACV,KCjDW,cDiDQI,WAAY,IAC/CG,QAAQC,IAAIf,EAAMgB,YAGlBE,IAASC,OAEPhC,EAAAC,EAAAC,cAAC+B,EAAD,MAEEC,SAASC,eAAe,SDqEtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,eC/DnBd,QAAQC,IAAR,GAAAN,OADU,CAAC,IAAI,IAAI,KACnB,CAAoB","file":"static/js/main.d7b7d2f0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport {connect} from 'react-redux'\n\nclass App extends  Component {\n  constructor(props){\n    super(props)\n  }\n\n  render(){\n  return (\n\n    <div className=\"container\">\n      <header>header</header>\n      <main>\n        <h1>main</h1>\n      </main>\n      <footer>footer</footer>\n    </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport {createStore} from 'redux'\nimport {Provider} from 'react-redux'\nimport {ADD_ITEM,DEL_ITEM,ADD_ELEMENT,DEL_ELEMENT} from './actions'\n\n\nconst initialState = {\n\titems: ['item-1','item-2','item-3'],\n\telements: ['element-1','element-2','element-3'],\n}\n\nconst listApp = (state = initialState, action) => {\n\tlet newarr = []\n\tswitch(action.type){\n\t\tcase ADD_ITEM:\n\t\t\treturn {...state, items: [...state.items,action.playholder]}\n\t\tcase DEL_ITEM:\n\t\t\t\n\t\t\treturn {...state, items: [...state.items.slice(0,action.playholder),...state.items.slice(action.playholder+1)] }\t\n\t\t\n\n\t\tcase ADD_ELEMENT:\n\t\t\treturn {...state, elements: [...state.elements,action.playholder]}\n\t\tcase DEL_ELEMENT:\t\n\t\t\treturn {...state, elements: [...state.elements.slice(0,action.playholder),...state.elements.slice(action.playholder+1)]}\n\t\tdefault:\n\t\t\treturn state\t\n\t}\n\treturn state\n}\n\nconst store = createStore(listApp,window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\nconsole.log(store.getState())\n\nstore.dispatch({type: ADD_ITEM, playholder: 'item-4'})\nconsole.log(store.getState())\n\nstore.dispatch({type: ADD_ELEMENT, playholder: 'element-4'})\nconsole.log(store.getState())\n\nstore.dispatch({type: DEL_ITEM, playholder: 2})\nconsole.log(store.getState())\n\nstore.dispatch({type: DEL_ITEM, playholder: 2})\nconsole.log(store.getState())\n\n\nstore.dispatch({type: DEL_ELEMENT, playholder: 1})\nconsole.log(store.getState())\n\n\nReactDOM.render(\n\n\t\t<App />\n\n\t\t, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\nlet arr = ['1','2','3']\nconsole.log([...arr,'5'])","export const ADD_ITEM = 'ADD_ITEM'\nexport const DEL_ITEM = 'DEL_ITEM'\nexport const ADD_ELEMENT = 'ADD_ELEMENT'\nexport const DEL_ELEMENT = 'DEL_ELEMENT'"],"sourceRoot":""}